// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b5LwbYjEqZs5FaGQRFULLt
// Component: QYI5zOzwcfc2u
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: xEfBjL782X3_J/component
import Footer from "../../Footer"; // plasmic-import: m93QERKfePj84/component

import { useScreenVariants as useScreenVariantsqSgDnwx63IBib } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: QSgDnwx63iBIB/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_my_little_central_bank.module.css"; // plasmic-import: b5LwbYjEqZs5FaGQRFULLt/projectcss
import sty from "./PlasmicAbout.module.css"; // plasmic-import: QYI5zOzwcfc2u/css

export type PlasmicAbout__VariantMembers = {};

export type PlasmicAbout__VariantsArgs = {};
type VariantPropType = keyof PlasmicAbout__VariantsArgs;
export const PlasmicAbout__VariantProps = new Array<VariantPropType>();

export type PlasmicAbout__ArgsType = {};
type ArgPropType = keyof PlasmicAbout__ArgsType;
export const PlasmicAbout__ArgProps = new Array<ArgPropType>();

export type PlasmicAbout__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  freeBox?: p.Flex<"div">;
  section?: p.Flex<"section">;
  text?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultAboutProps {
  className?: string;
}

function PlasmicAbout__RenderFunc(props: {
  variants: PlasmicAbout__VariantsArgs;
  args: PlasmicAbout__ArgsType;
  overrides: PlasmicAbout__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqSgDnwx63IBib()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          {true ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <p.Stack
                as={"section"}
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                hasGap={true}
                className={classNames(projectcss.all, sty.section)}
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. "
                    : "Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. Explain this shit. "}
                </div>
              </p.Stack>
            </div>
          ) : null}

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "freeBox", "section", "text", "footer"],
  header: ["header"],
  freeBox: ["freeBox", "section", "text"],
  section: ["section", "text"],
  text: ["text"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  freeBox: "div";
  section: "section";
  text: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAbout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAbout__VariantsArgs;
    args?: PlasmicAbout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAbout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAbout__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAbout__ArgProps,
          internalVariantPropNames: PlasmicAbout__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAbout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAbout";
  } else {
    func.displayName = `PlasmicAbout.${nodeName}`;
  }
  return func;
}

export const PlasmicAbout = Object.assign(
  // Top-level PlasmicAbout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    freeBox: makeNodeComponent("freeBox"),
    section: makeNodeComponent("section"),
    text: makeNodeComponent("text"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicAbout
    internalVariantProps: PlasmicAbout__VariantProps,
    internalArgProps: PlasmicAbout__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAbout;
/* prettier-ignore-end */
