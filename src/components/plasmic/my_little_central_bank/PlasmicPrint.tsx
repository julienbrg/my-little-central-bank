// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b5LwbYjEqZs5FaGQRFULLt
// Component: PoWUuUKq22nWX
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: xEfBjL782X3_J/component
import TextInput from "../../TextInput"; // plasmic-import: aAttJc8BJ4n/component
import Button from "../../Button"; // plasmic-import: winhaleizsLhC/component
import Footer from "../../Footer"; // plasmic-import: m93QERKfePj84/component

import { useScreenVariants as useScreenVariantsqSgDnwx63IBib } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: QSgDnwx63iBIB/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_my_little_central_bank.module.css"; // plasmic-import: b5LwbYjEqZs5FaGQRFULLt/projectcss
import sty from "./PlasmicPrint.module.css"; // plasmic-import: PoWUuUKq22nWX/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: _qqpG68hYcT/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: J3aj4knOCf4jfK/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 8HneqZgjoi6Gy7/icon

export type PlasmicPrint__VariantMembers = {};

export type PlasmicPrint__VariantsArgs = {};
type VariantPropType = keyof PlasmicPrint__VariantsArgs;
export const PlasmicPrint__VariantProps = new Array<VariantPropType>();

export type PlasmicPrint__ArgsType = {};
type ArgPropType = keyof PlasmicPrint__ArgsType;
export const PlasmicPrint__ArgProps = new Array<ArgPropType>();

export type PlasmicPrint__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  section?: p.Flex<"section">;
  text?: p.Flex<"div">;
  textBox?: p.Flex<"div">;
  amountInput?: p.Flex<typeof TextInput>;
  msgBox?: p.Flex<"div">;
  print?: p.Flex<typeof Button>;
  action?: p.Flex<typeof Button>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultPrintProps {
  className?: string;
}

function PlasmicPrint__RenderFunc(props: {
  variants: PlasmicPrint__VariantsArgs;
  args: PlasmicPrint__ArgsType;
  overrides: PlasmicPrint__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqSgDnwx63IBib()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__wlAsf)}>
              <p.Stack
                as={"section"}
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                hasGap={true}
                className={classNames(projectcss.all, sty.section)}
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "You can mint as many DUNE as you want. We're on Aurora Testnet. Just make sure you're "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"logged in with MetaMask"}
                    </span>
                    <React.Fragment>
                      {" and connected to a wallet that "}
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"holds a bit of Aurora Testnet ETH"}
                    </span>
                    <React.Fragment>
                      {
                        '.\n\n"First reported in 2020 and confirmed in 2021 the dune aurora phenomenon was discovered by Finnish citizen scientists. It consists of regularly-spaced, parallel stripes of brighter emission in the green diffuse aurora which give the impression of sand dunes. The phenomenon is believed to be caused by the modulation of atomic oxygen density by a large-scale atmospheric wave travelling horizontally in a waveguide through an inversion layer in the mesosphere in presence of electron precipitation."'
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox___5XgXm)}
                >
                  <div
                    data-plasmic-name={"textBox"}
                    data-plasmic-override={overrides.textBox}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.textBox
                    )}
                  >
                    {"Your wallet is currently holding 10,000 EUR."}
                  </div>
                </div>

                <TextInput
                  data-plasmic-name={"amountInput"}
                  data-plasmic-override={overrides.amountInput}
                  className={classNames("__wab_instance", sty.amountInput)}
                  name={"amountInput" as const}
                />

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vmXfX)}
                  >
                    <div
                      data-plasmic-name={"msgBox"}
                      data-plasmic-override={overrides.msgBox}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.msgBox
                      )}
                    >
                      {"Message in a bottle, yo."}
                    </div>

                    <Button
                      data-plasmic-name={"print"}
                      data-plasmic-override={overrides.print}
                      className={classNames("__wab_instance", sty.print)}
                    >
                      {"Print"}
                    </Button>

                    {true ? (
                      <Button
                        data-plasmic-name={"action"}
                        data-plasmic-override={overrides.action}
                        className={classNames("__wab_instance", sty.action)}
                        color={"blue" as const}
                      >
                        {"Do something"}
                      </Button>
                    ) : null}
                  </p.Stack>
                ) : null}
              </p.Stack>
            </div>
          ) : null}

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "section",
    "text",
    "textBox",
    "amountInput",
    "msgBox",
    "print",
    "action",
    "footer"
  ],
  header: ["header"],
  section: [
    "section",
    "text",
    "textBox",
    "amountInput",
    "msgBox",
    "print",
    "action"
  ],
  text: ["text"],
  textBox: ["textBox"],
  amountInput: ["amountInput"],
  msgBox: ["msgBox"],
  print: ["print"],
  action: ["action"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  section: "section";
  text: "div";
  textBox: "div";
  amountInput: typeof TextInput;
  msgBox: "div";
  print: typeof Button;
  action: typeof Button;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPrint__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPrint__VariantsArgs;
    args?: PlasmicPrint__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPrint__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPrint__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPrint__ArgProps,
          internalVariantPropNames: PlasmicPrint__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPrint__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPrint";
  } else {
    func.displayName = `PlasmicPrint.${nodeName}`;
  }
  return func;
}

export const PlasmicPrint = Object.assign(
  // Top-level PlasmicPrint renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    section: makeNodeComponent("section"),
    text: makeNodeComponent("text"),
    textBox: makeNodeComponent("textBox"),
    amountInput: makeNodeComponent("amountInput"),
    msgBox: makeNodeComponent("msgBox"),
    print: makeNodeComponent("print"),
    action: makeNodeComponent("action"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicPrint
    internalVariantProps: PlasmicPrint__VariantProps,
    internalArgProps: PlasmicPrint__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPrint;
/* prettier-ignore-end */
