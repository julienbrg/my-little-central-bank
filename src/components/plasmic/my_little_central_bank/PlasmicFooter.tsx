// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b5LwbYjEqZs5FaGQRFULLt
// Component: m93QERKfePj84
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsqSgDnwx63IBib } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: QSgDnwx63iBIB/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_my_little_central_bank.module.css"; // plasmic-import: b5LwbYjEqZs5FaGQRFULLt/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: m93QERKfePj84/css

import imageAso1Oipk from "./images/image.png"; // plasmic-import: aso1_oipk/picture

export type PlasmicFooter__VariantMembers = {};

export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  supplyBox?: p.Flex<"a">;
  span?: p.Flex<"span">;
  link?: p.Flex<"a">;
  img?: p.Flex<typeof p.PlasmicImg>;
  userAddressBox?: p.Flex<"a">;
};

export interface DefaultFooterProps {
  className?: string;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqSgDnwx63IBib()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__sCzZu)}>
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__sksCo)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__dedr2)}>
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Current total supply: "}</React.Fragment>
                    {
                      <a
                        data-plasmic-name={"supplyBox"}
                        data-plasmic-override={overrides.supplyBox}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.supplyBox
                        )}
                        href={" " as const}
                      >
                        {"x"}
                      </a>
                    }
                    <React.Fragment> </React.Fragment>
                    {
                      <span
                        data-plasmic-name={"span"}
                        data-plasmic-override={overrides.span}
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "DUNE"
                          : "DUNE"}
                      </span>
                    }
                    <React.Fragment>{"  "}</React.Fragment>
                  </React.Fragment>
                </div>

                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__urzDv)}
                  >
                    <a
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link
                      )}
                      href={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("https://github.com/julienbrg/my-little-central-bank/tree/dune" as const)
                          : ("https://github.com/julienbrg/my-little-central-bank" as const)
                      }
                      target={"_blank" as const}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"31px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: imageAso1Oipk,
                          fullWidth: 275,
                          fullHeight: 183,
                          aspectRatio: undefined
                        }}
                      />
                    </a>
                  </div>
                ) : null}
              </div>
            ) : null}
          </div>
        ) : null}

        <a
          data-plasmic-name={"userAddressBox"}
          data-plasmic-override={overrides.userAddressBox}
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.userAddressBox
          )}
          href={`/`}
        >
          {""}
        </a>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "supplyBox", "span", "link", "img", "userAddressBox"],
  text: ["text", "supplyBox", "span"],
  supplyBox: ["supplyBox"],
  span: ["span"],
  link: ["link", "img"],
  img: ["img"],
  userAddressBox: ["userAddressBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  supplyBox: "a";
  span: "span";
  link: "a";
  img: typeof p.PlasmicImg;
  userAddressBox: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    supplyBox: makeNodeComponent("supplyBox"),
    span: makeNodeComponent("span"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    userAddressBox: makeNodeComponent("userAddressBox"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
